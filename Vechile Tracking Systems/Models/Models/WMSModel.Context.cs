//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Vechile_Tracking_Systems.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class WMSDBEntities : DbContext
    {
        public WMSDBEntities()
            : base("name=WMSDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<ChildForm> ChildForms { get; set; }
        public virtual DbSet<Component> Components { get; set; }
        public virtual DbSet<Form_List> Form_List { get; set; }
        public virtual DbSet<Form_Value> Form_Value { get; set; }
        public virtual DbSet<GRReport> GRReports { get; set; }
        public virtual DbSet<ParentForm> ParentForms { get; set; }
        public virtual DbSet<Report> Reports { get; set; }
        public virtual DbSet<Report_Parameter> Report_Parameters { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<UserLog> UserLogs { get; set; }
        public virtual DbSet<table_MainGate> table_MainGate { get; set; }
        public virtual DbSet<tblProduct> tblProducts { get; set; }
        public virtual DbSet<tblProductType> tblProductTypes { get; set; }
        public virtual DbSet<tblUOM> tblUOMs { get; set; }
        public virtual DbSet<tblVehicle> tblVehicles { get; set; }
        public virtual DbSet<tblVehicleEntryDetailProduct> tblVehicleEntryDetailProducts { get; set; }
        public virtual DbSet<tblVehicleNature> tblVehicleNatures { get; set; }
        public virtual DbSet<tblVehicleEntryDetail> tblVehicleEntryDetails { get; set; }
        public virtual DbSet<tblVehicleEntryHead> tblVehicleEntryHeads { get; set; }
        public virtual DbSet<tblTransporter> tblTransporters { get; set; }
        public virtual DbSet<ActivityLog> ActivityLogs { get; set; }
        public virtual DbSet<tbl_Driver> tbl_Driver { get; set; }
        public virtual DbSet<WeighmentEntry> WeighmentEntries { get; set; }
        public virtual DbSet<DeviceLocation> DeviceLocations { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_GenericFormValue_Result> sp_GenericFormValue(Nullable<int> parentId, Nullable<int> formId)
        {
            var parentIdParameter = parentId.HasValue ?
                new ObjectParameter("parentId", parentId) :
                new ObjectParameter("parentId", typeof(int));
    
            var formIdParameter = formId.HasValue ?
                new ObjectParameter("formId", formId) :
                new ObjectParameter("formId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GenericFormValue_Result>("sp_GenericFormValue", parentIdParameter, formIdParameter);
        }
    
        public virtual ObjectResult<SP_GoodsReciept_Result> SP_GoodsReciept(Nullable<int> reportId)
        {
            var reportIdParameter = reportId.HasValue ?
                new ObjectParameter("ReportId", reportId) :
                new ObjectParameter("ReportId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GoodsReciept_Result>("SP_GoodsReciept", reportIdParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual ObjectResult<Sp_TreeHirerchy_Result> Sp_TreeHirerchy()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_TreeHirerchy_Result>("Sp_TreeHirerchy");
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<SP_MainGateIn_Result> SP_MainGateIn()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_MainGateIn_Result>("SP_MainGateIn");
        }
    
        public virtual ObjectResult<sp_VehicleInMainGate_Result> sp_VehicleInMainGate()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_VehicleInMainGate_Result>("sp_VehicleInMainGate");
        }
    
        public virtual ObjectResult<VW_SHIPMENT_Result> VW_SHIPMENT()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VW_SHIPMENT_Result>("VW_SHIPMENT");
        }
    
        public virtual ObjectResult<SP_VehicleInMainGate1_Result> SP_VehicleInMainGate1(string vehicleNo)
        {
            var vehicleNoParameter = vehicleNo != null ?
                new ObjectParameter("VehicleNo", vehicleNo) :
                new ObjectParameter("VehicleNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_VehicleInMainGate1_Result>("SP_VehicleInMainGate1", vehicleNoParameter);
        }
    
        public virtual int SP_DeleteVehicle(Nullable<long> vehicleId)
        {
            var vehicleIdParameter = vehicleId.HasValue ?
                new ObjectParameter("VehicleId", vehicleId) :
                new ObjectParameter("VehicleId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_DeleteVehicle", vehicleIdParameter);
        }
    
        public virtual int SP_InsertVehicle(Nullable<long> vehicleID, string vehicleRefNo, string oldCode, string vehicleTitle, Nullable<long> branchID, Nullable<long> vehicleNatureID, Nullable<long> vehicleTypeID, Nullable<double> minimumWeightForPayable, Nullable<long> vehicleCategoryID, Nullable<long> transporterID, Nullable<double> length, Nullable<double> width, Nullable<double> height, Nullable<double> capacity, Nullable<int> wheels, Nullable<int> axle, Nullable<int> mfgYear, Nullable<int> priority, Nullable<int> preferenceNo, Nullable<double> minumumLoadInTon, Nullable<double> maximumLoadInTon, Nullable<long> companyID, Nullable<bool> isActive, string tranType, string vehicleNo)
        {
            var vehicleIDParameter = vehicleID.HasValue ?
                new ObjectParameter("VehicleID", vehicleID) :
                new ObjectParameter("VehicleID", typeof(long));
    
            var vehicleRefNoParameter = vehicleRefNo != null ?
                new ObjectParameter("VehicleRefNo", vehicleRefNo) :
                new ObjectParameter("VehicleRefNo", typeof(string));
    
            var oldCodeParameter = oldCode != null ?
                new ObjectParameter("OldCode", oldCode) :
                new ObjectParameter("OldCode", typeof(string));
    
            var vehicleTitleParameter = vehicleTitle != null ?
                new ObjectParameter("VehicleTitle", vehicleTitle) :
                new ObjectParameter("VehicleTitle", typeof(string));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(long));
    
            var vehicleNatureIDParameter = vehicleNatureID.HasValue ?
                new ObjectParameter("VehicleNatureID", vehicleNatureID) :
                new ObjectParameter("VehicleNatureID", typeof(long));
    
            var vehicleTypeIDParameter = vehicleTypeID.HasValue ?
                new ObjectParameter("VehicleTypeID", vehicleTypeID) :
                new ObjectParameter("VehicleTypeID", typeof(long));
    
            var minimumWeightForPayableParameter = minimumWeightForPayable.HasValue ?
                new ObjectParameter("MinimumWeightForPayable", minimumWeightForPayable) :
                new ObjectParameter("MinimumWeightForPayable", typeof(double));
    
            var vehicleCategoryIDParameter = vehicleCategoryID.HasValue ?
                new ObjectParameter("VehicleCategoryID", vehicleCategoryID) :
                new ObjectParameter("VehicleCategoryID", typeof(long));
    
            var transporterIDParameter = transporterID.HasValue ?
                new ObjectParameter("TransporterID", transporterID) :
                new ObjectParameter("TransporterID", typeof(long));
    
            var lengthParameter = length.HasValue ?
                new ObjectParameter("Length", length) :
                new ObjectParameter("Length", typeof(double));
    
            var widthParameter = width.HasValue ?
                new ObjectParameter("Width", width) :
                new ObjectParameter("Width", typeof(double));
    
            var heightParameter = height.HasValue ?
                new ObjectParameter("Height", height) :
                new ObjectParameter("Height", typeof(double));
    
            var capacityParameter = capacity.HasValue ?
                new ObjectParameter("Capacity", capacity) :
                new ObjectParameter("Capacity", typeof(double));
    
            var wheelsParameter = wheels.HasValue ?
                new ObjectParameter("Wheels", wheels) :
                new ObjectParameter("Wheels", typeof(int));
    
            var axleParameter = axle.HasValue ?
                new ObjectParameter("Axle", axle) :
                new ObjectParameter("Axle", typeof(int));
    
            var mfgYearParameter = mfgYear.HasValue ?
                new ObjectParameter("MfgYear", mfgYear) :
                new ObjectParameter("MfgYear", typeof(int));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            var preferenceNoParameter = preferenceNo.HasValue ?
                new ObjectParameter("PreferenceNo", preferenceNo) :
                new ObjectParameter("PreferenceNo", typeof(int));
    
            var minumumLoadInTonParameter = minumumLoadInTon.HasValue ?
                new ObjectParameter("MinumumLoadInTon", minumumLoadInTon) :
                new ObjectParameter("MinumumLoadInTon", typeof(double));
    
            var maximumLoadInTonParameter = maximumLoadInTon.HasValue ?
                new ObjectParameter("MaximumLoadInTon", maximumLoadInTon) :
                new ObjectParameter("MaximumLoadInTon", typeof(double));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(long));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var tranTypeParameter = tranType != null ?
                new ObjectParameter("TranType", tranType) :
                new ObjectParameter("TranType", typeof(string));
    
            var vehicleNoParameter = vehicleNo != null ?
                new ObjectParameter("VehicleNo", vehicleNo) :
                new ObjectParameter("VehicleNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertVehicle", vehicleIDParameter, vehicleRefNoParameter, oldCodeParameter, vehicleTitleParameter, branchIDParameter, vehicleNatureIDParameter, vehicleTypeIDParameter, minimumWeightForPayableParameter, vehicleCategoryIDParameter, transporterIDParameter, lengthParameter, widthParameter, heightParameter, capacityParameter, wheelsParameter, axleParameter, mfgYearParameter, priorityParameter, preferenceNoParameter, minumumLoadInTonParameter, maximumLoadInTonParameter, companyIDParameter, isActiveParameter, tranTypeParameter, vehicleNoParameter);
        }
    
        public virtual ObjectResult<SP_SelectVehicle_Result> SP_SelectVehicle()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SelectVehicle_Result>("SP_SelectVehicle");
        }
    
        public virtual int SP_UPDVehicle(Nullable<long> vehicleID, string vehicleRefNo, string oldCode, string vehicleTitle, Nullable<long> branchID, Nullable<long> vehicleNatureID, Nullable<long> vehicleTypeID, Nullable<double> minimumWeightForPayable, Nullable<long> vehicleCategoryID, Nullable<long> transporterID, Nullable<double> length, Nullable<double> width, Nullable<double> height, Nullable<double> capacity, Nullable<int> wheels, Nullable<int> axle, Nullable<int> mfgYear, Nullable<int> priority, Nullable<int> preferenceNo, Nullable<double> minumumLoadInTon, Nullable<double> maximumLoadInTon, Nullable<long> companyID, Nullable<bool> isActive, string tranType, string vehicleNo)
        {
            var vehicleIDParameter = vehicleID.HasValue ?
                new ObjectParameter("VehicleID", vehicleID) :
                new ObjectParameter("VehicleID", typeof(long));
    
            var vehicleRefNoParameter = vehicleRefNo != null ?
                new ObjectParameter("VehicleRefNo", vehicleRefNo) :
                new ObjectParameter("VehicleRefNo", typeof(string));
    
            var oldCodeParameter = oldCode != null ?
                new ObjectParameter("OldCode", oldCode) :
                new ObjectParameter("OldCode", typeof(string));
    
            var vehicleTitleParameter = vehicleTitle != null ?
                new ObjectParameter("VehicleTitle", vehicleTitle) :
                new ObjectParameter("VehicleTitle", typeof(string));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(long));
    
            var vehicleNatureIDParameter = vehicleNatureID.HasValue ?
                new ObjectParameter("VehicleNatureID", vehicleNatureID) :
                new ObjectParameter("VehicleNatureID", typeof(long));
    
            var vehicleTypeIDParameter = vehicleTypeID.HasValue ?
                new ObjectParameter("VehicleTypeID", vehicleTypeID) :
                new ObjectParameter("VehicleTypeID", typeof(long));
    
            var minimumWeightForPayableParameter = minimumWeightForPayable.HasValue ?
                new ObjectParameter("MinimumWeightForPayable", minimumWeightForPayable) :
                new ObjectParameter("MinimumWeightForPayable", typeof(double));
    
            var vehicleCategoryIDParameter = vehicleCategoryID.HasValue ?
                new ObjectParameter("VehicleCategoryID", vehicleCategoryID) :
                new ObjectParameter("VehicleCategoryID", typeof(long));
    
            var transporterIDParameter = transporterID.HasValue ?
                new ObjectParameter("TransporterID", transporterID) :
                new ObjectParameter("TransporterID", typeof(long));
    
            var lengthParameter = length.HasValue ?
                new ObjectParameter("Length", length) :
                new ObjectParameter("Length", typeof(double));
    
            var widthParameter = width.HasValue ?
                new ObjectParameter("Width", width) :
                new ObjectParameter("Width", typeof(double));
    
            var heightParameter = height.HasValue ?
                new ObjectParameter("Height", height) :
                new ObjectParameter("Height", typeof(double));
    
            var capacityParameter = capacity.HasValue ?
                new ObjectParameter("Capacity", capacity) :
                new ObjectParameter("Capacity", typeof(double));
    
            var wheelsParameter = wheels.HasValue ?
                new ObjectParameter("Wheels", wheels) :
                new ObjectParameter("Wheels", typeof(int));
    
            var axleParameter = axle.HasValue ?
                new ObjectParameter("Axle", axle) :
                new ObjectParameter("Axle", typeof(int));
    
            var mfgYearParameter = mfgYear.HasValue ?
                new ObjectParameter("MfgYear", mfgYear) :
                new ObjectParameter("MfgYear", typeof(int));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            var preferenceNoParameter = preferenceNo.HasValue ?
                new ObjectParameter("PreferenceNo", preferenceNo) :
                new ObjectParameter("PreferenceNo", typeof(int));
    
            var minumumLoadInTonParameter = minumumLoadInTon.HasValue ?
                new ObjectParameter("MinumumLoadInTon", minumumLoadInTon) :
                new ObjectParameter("MinumumLoadInTon", typeof(double));
    
            var maximumLoadInTonParameter = maximumLoadInTon.HasValue ?
                new ObjectParameter("MaximumLoadInTon", maximumLoadInTon) :
                new ObjectParameter("MaximumLoadInTon", typeof(double));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(long));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var tranTypeParameter = tranType != null ?
                new ObjectParameter("TranType", tranType) :
                new ObjectParameter("TranType", typeof(string));
    
            var vehicleNoParameter = vehicleNo != null ?
                new ObjectParameter("VehicleNo", vehicleNo) :
                new ObjectParameter("VehicleNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UPDVehicle", vehicleIDParameter, vehicleRefNoParameter, oldCodeParameter, vehicleTitleParameter, branchIDParameter, vehicleNatureIDParameter, vehicleTypeIDParameter, minimumWeightForPayableParameter, vehicleCategoryIDParameter, transporterIDParameter, lengthParameter, widthParameter, heightParameter, capacityParameter, wheelsParameter, axleParameter, mfgYearParameter, priorityParameter, preferenceNoParameter, minumumLoadInTonParameter, maximumLoadInTonParameter, companyIDParameter, isActiveParameter, tranTypeParameter, vehicleNoParameter);
        }
    
        public virtual ObjectResult<SP_VehicleInMainGateINOUT_Result> SP_VehicleInMainGateINOUT(string vehicleNo)
        {
            var vehicleNoParameter = vehicleNo != null ?
                new ObjectParameter("VehicleNo", vehicleNo) :
                new ObjectParameter("VehicleNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_VehicleInMainGateINOUT_Result>("SP_VehicleInMainGateINOUT", vehicleNoParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> SP_VehicleQRCODE()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("SP_VehicleQRCODE");
        }
    
        public virtual ObjectResult<SP_VehicleQRCode1_Result> SP_VehicleQRCode1()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_VehicleQRCode1_Result>("SP_VehicleQRCode1");
        }
    
        public virtual int SP_Insert(Nullable<long> tranID, Nullable<System.DateTime> transactionDate, string tranType, string vehicleEntryMode, Nullable<long> vehicleNatureID, Nullable<long> vehicleID, string vehicleNo, Nullable<long> transporterID, Nullable<long> driverID, string nIC, Nullable<long> rFCardID, string partyType, string partyDescription, string partyPONo, Nullable<System.DateTime> partyPODate, string docNo, Nullable<System.DateTime> docDate, string entryStatus, string shipmentDocumentNo, Nullable<System.DateTime> shipmentDocumentDate, string shipmentRemarks1, string shipmentRemarks2)
        {
            var tranIDParameter = tranID.HasValue ?
                new ObjectParameter("TranID", tranID) :
                new ObjectParameter("TranID", typeof(long));
    
            var transactionDateParameter = transactionDate.HasValue ?
                new ObjectParameter("TransactionDate", transactionDate) :
                new ObjectParameter("TransactionDate", typeof(System.DateTime));
    
            var tranTypeParameter = tranType != null ?
                new ObjectParameter("TranType", tranType) :
                new ObjectParameter("TranType", typeof(string));
    
            var vehicleEntryModeParameter = vehicleEntryMode != null ?
                new ObjectParameter("VehicleEntryMode", vehicleEntryMode) :
                new ObjectParameter("VehicleEntryMode", typeof(string));
    
            var vehicleNatureIDParameter = vehicleNatureID.HasValue ?
                new ObjectParameter("VehicleNatureID", vehicleNatureID) :
                new ObjectParameter("VehicleNatureID", typeof(long));
    
            var vehicleIDParameter = vehicleID.HasValue ?
                new ObjectParameter("VehicleID", vehicleID) :
                new ObjectParameter("VehicleID", typeof(long));
    
            var vehicleNoParameter = vehicleNo != null ?
                new ObjectParameter("VehicleNo", vehicleNo) :
                new ObjectParameter("VehicleNo", typeof(string));
    
            var transporterIDParameter = transporterID.HasValue ?
                new ObjectParameter("TransporterID", transporterID) :
                new ObjectParameter("TransporterID", typeof(long));
    
            var driverIDParameter = driverID.HasValue ?
                new ObjectParameter("DriverID", driverID) :
                new ObjectParameter("DriverID", typeof(long));
    
            var nICParameter = nIC != null ?
                new ObjectParameter("NIC", nIC) :
                new ObjectParameter("NIC", typeof(string));
    
            var rFCardIDParameter = rFCardID.HasValue ?
                new ObjectParameter("RFCardID", rFCardID) :
                new ObjectParameter("RFCardID", typeof(long));
    
            var partyTypeParameter = partyType != null ?
                new ObjectParameter("PartyType", partyType) :
                new ObjectParameter("PartyType", typeof(string));
    
            var partyDescriptionParameter = partyDescription != null ?
                new ObjectParameter("PartyDescription", partyDescription) :
                new ObjectParameter("PartyDescription", typeof(string));
    
            var partyPONoParameter = partyPONo != null ?
                new ObjectParameter("PartyPONo", partyPONo) :
                new ObjectParameter("PartyPONo", typeof(string));
    
            var partyPODateParameter = partyPODate.HasValue ?
                new ObjectParameter("PartyPODate", partyPODate) :
                new ObjectParameter("PartyPODate", typeof(System.DateTime));
    
            var docNoParameter = docNo != null ?
                new ObjectParameter("DocNo", docNo) :
                new ObjectParameter("DocNo", typeof(string));
    
            var docDateParameter = docDate.HasValue ?
                new ObjectParameter("DocDate", docDate) :
                new ObjectParameter("DocDate", typeof(System.DateTime));
    
            var entryStatusParameter = entryStatus != null ?
                new ObjectParameter("EntryStatus", entryStatus) :
                new ObjectParameter("EntryStatus", typeof(string));
    
            var shipmentDocumentNoParameter = shipmentDocumentNo != null ?
                new ObjectParameter("ShipmentDocumentNo", shipmentDocumentNo) :
                new ObjectParameter("ShipmentDocumentNo", typeof(string));
    
            var shipmentDocumentDateParameter = shipmentDocumentDate.HasValue ?
                new ObjectParameter("ShipmentDocumentDate", shipmentDocumentDate) :
                new ObjectParameter("ShipmentDocumentDate", typeof(System.DateTime));
    
            var shipmentRemarks1Parameter = shipmentRemarks1 != null ?
                new ObjectParameter("ShipmentRemarks1", shipmentRemarks1) :
                new ObjectParameter("ShipmentRemarks1", typeof(string));
    
            var shipmentRemarks2Parameter = shipmentRemarks2 != null ?
                new ObjectParameter("ShipmentRemarks2", shipmentRemarks2) :
                new ObjectParameter("ShipmentRemarks2", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Insert", tranIDParameter, transactionDateParameter, tranTypeParameter, vehicleEntryModeParameter, vehicleNatureIDParameter, vehicleIDParameter, vehicleNoParameter, transporterIDParameter, driverIDParameter, nICParameter, rFCardIDParameter, partyTypeParameter, partyDescriptionParameter, partyPONoParameter, partyPODateParameter, docNoParameter, docDateParameter, entryStatusParameter, shipmentDocumentNoParameter, shipmentDocumentDateParameter, shipmentRemarks1Parameter, shipmentRemarks2Parameter);
        }
    
        public virtual ObjectResult<Sp_Weighbridge_Result> Sp_Weighbridge()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_Weighbridge_Result>("Sp_Weighbridge");
        }
    
        public virtual int SP_InsertDriver(string driverRefNo, string driverTitle, Nullable<long> transporterID, string nIC, string telNo, string mobileNo)
        {
            var driverRefNoParameter = driverRefNo != null ?
                new ObjectParameter("DriverRefNo", driverRefNo) :
                new ObjectParameter("DriverRefNo", typeof(string));
    
            var driverTitleParameter = driverTitle != null ?
                new ObjectParameter("DriverTitle", driverTitle) :
                new ObjectParameter("DriverTitle", typeof(string));
    
            var transporterIDParameter = transporterID.HasValue ?
                new ObjectParameter("TransporterID", transporterID) :
                new ObjectParameter("TransporterID", typeof(long));
    
            var nICParameter = nIC != null ?
                new ObjectParameter("NIC", nIC) :
                new ObjectParameter("NIC", typeof(string));
    
            var telNoParameter = telNo != null ?
                new ObjectParameter("TelNo", telNo) :
                new ObjectParameter("TelNo", typeof(string));
    
            var mobileNoParameter = mobileNo != null ?
                new ObjectParameter("MobileNo", mobileNo) :
                new ObjectParameter("MobileNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertDriver", driverRefNoParameter, driverTitleParameter, transporterIDParameter, nICParameter, telNoParameter, mobileNoParameter);
        }
    
        public virtual int Sp_InsertTransport(string transporterRefNo, string oldCode, string transporterTitle, string transporterType, Nullable<int> totalVehicles, string address1, string address2, string telNo, string faxNo, string email, string webSite, Nullable<int> preferenceNo)
        {
            var transporterRefNoParameter = transporterRefNo != null ?
                new ObjectParameter("TransporterRefNo", transporterRefNo) :
                new ObjectParameter("TransporterRefNo", typeof(string));
    
            var oldCodeParameter = oldCode != null ?
                new ObjectParameter("OldCode", oldCode) :
                new ObjectParameter("OldCode", typeof(string));
    
            var transporterTitleParameter = transporterTitle != null ?
                new ObjectParameter("TransporterTitle", transporterTitle) :
                new ObjectParameter("TransporterTitle", typeof(string));
    
            var transporterTypeParameter = transporterType != null ?
                new ObjectParameter("TransporterType", transporterType) :
                new ObjectParameter("TransporterType", typeof(string));
    
            var totalVehiclesParameter = totalVehicles.HasValue ?
                new ObjectParameter("TotalVehicles", totalVehicles) :
                new ObjectParameter("TotalVehicles", typeof(int));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("Address1", address1) :
                new ObjectParameter("Address1", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("Address2", address2) :
                new ObjectParameter("Address2", typeof(string));
    
            var telNoParameter = telNo != null ?
                new ObjectParameter("TelNo", telNo) :
                new ObjectParameter("TelNo", typeof(string));
    
            var faxNoParameter = faxNo != null ?
                new ObjectParameter("FaxNo", faxNo) :
                new ObjectParameter("FaxNo", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var webSiteParameter = webSite != null ?
                new ObjectParameter("WebSite", webSite) :
                new ObjectParameter("WebSite", typeof(string));
    
            var preferenceNoParameter = preferenceNo.HasValue ?
                new ObjectParameter("PreferenceNo", preferenceNo) :
                new ObjectParameter("PreferenceNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_InsertTransport", transporterRefNoParameter, oldCodeParameter, transporterTitleParameter, transporterTypeParameter, totalVehiclesParameter, address1Parameter, address2Parameter, telNoParameter, faxNoParameter, emailParameter, webSiteParameter, preferenceNoParameter);
        }
    
        public virtual ObjectResult<SP_SelectTransport_Result> SP_SelectTransport()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SelectTransport_Result>("SP_SelectTransport");
        }
    
        public virtual int SP_InsertActivityLog(Nullable<System.DateTime> dateTime, string qRCodeNo, string activityType)
        {
            var dateTimeParameter = dateTime.HasValue ?
                new ObjectParameter("DateTime", dateTime) :
                new ObjectParameter("DateTime", typeof(System.DateTime));
    
            var qRCodeNoParameter = qRCodeNo != null ?
                new ObjectParameter("QRCodeNo", qRCodeNo) :
                new ObjectParameter("QRCodeNo", typeof(string));
    
            var activityTypeParameter = activityType != null ?
                new ObjectParameter("ActivityType", activityType) :
                new ObjectParameter("ActivityType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertActivityLog", dateTimeParameter, qRCodeNoParameter, activityTypeParameter);
        }
    
        public virtual ObjectResult<SP_SelectTransport1_Result> SP_SelectTransport1()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SelectTransport1_Result>("SP_SelectTransport1");
        }
    
        public virtual ObjectResult<SP_SelectProduct_Result> SP_SelectProduct()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SelectProduct_Result>("SP_SelectProduct");
        }
    
        public virtual ObjectResult<SP_SelectUOM_Result> SP_SelectUOM()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SelectUOM_Result>("SP_SelectUOM");
        }
    
        public virtual ObjectResult<SP_VehicleNatureType_Result> SP_VehicleNatureType()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_VehicleNatureType_Result>("SP_VehicleNatureType");
        }
    
        public virtual int SP_InsertDetailsDriver(string driverRefNo, string driverTitle, Nullable<long> transporterID, string nIC, string telNo, string mobileNo)
        {
            var driverRefNoParameter = driverRefNo != null ?
                new ObjectParameter("DriverRefNo", driverRefNo) :
                new ObjectParameter("DriverRefNo", typeof(string));
    
            var driverTitleParameter = driverTitle != null ?
                new ObjectParameter("DriverTitle", driverTitle) :
                new ObjectParameter("DriverTitle", typeof(string));
    
            var transporterIDParameter = transporterID.HasValue ?
                new ObjectParameter("TransporterID", transporterID) :
                new ObjectParameter("TransporterID", typeof(long));
    
            var nICParameter = nIC != null ?
                new ObjectParameter("NIC", nIC) :
                new ObjectParameter("NIC", typeof(string));
    
            var telNoParameter = telNo != null ?
                new ObjectParameter("TelNo", telNo) :
                new ObjectParameter("TelNo", typeof(string));
    
            var mobileNoParameter = mobileNo != null ?
                new ObjectParameter("MobileNo", mobileNo) :
                new ObjectParameter("MobileNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertDetailsDriver", driverRefNoParameter, driverTitleParameter, transporterIDParameter, nICParameter, telNoParameter, mobileNoParameter);
        }
    
        public virtual ObjectResult<SP_SelectVehicle1_Result> SP_SelectVehicle1()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SelectVehicle1_Result>("SP_SelectVehicle1");
        }
    
        public virtual ObjectResult<Nullable<int>> SP_SelectVehicleList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SP_SelectVehicleList");
        }
    
        public virtual ObjectResult<string> SP_TransporterList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_TransporterList");
        }
    
        public virtual ObjectResult<string> SP_SelectProductList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_SelectProductList");
        }
    
        public virtual ObjectResult<string> SP_SelectUOMList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_SelectUOMList");
        }
    
        public virtual ObjectResult<Sp_VehichleInfo_Result> Sp_VehichleInfo()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_VehichleInfo_Result>("Sp_VehichleInfo");
        }
    
        public virtual int SP_INSERT_New_Vehicles(Nullable<long> vehicleID, string vehicleRefNo, string oldCode, string vehicleTitle, Nullable<long> branchID, Nullable<long> vehicleNatureID, Nullable<long> vehicleTypeID, Nullable<double> minimumWeightForPayable, Nullable<long> vehicleCategoryID, Nullable<long> transporterID, Nullable<double> length, Nullable<double> width, Nullable<double> height, Nullable<double> capacity, Nullable<int> wheels, Nullable<int> axle, Nullable<int> mfgYear, Nullable<int> priority, Nullable<int> preferenceNo, Nullable<double> minumumLoadInTon, Nullable<double> maximumLoadInTon, Nullable<long> companyID, string vehicleNo)
        {
            var vehicleIDParameter = vehicleID.HasValue ?
                new ObjectParameter("VehicleID", vehicleID) :
                new ObjectParameter("VehicleID", typeof(long));
    
            var vehicleRefNoParameter = vehicleRefNo != null ?
                new ObjectParameter("VehicleRefNo", vehicleRefNo) :
                new ObjectParameter("VehicleRefNo", typeof(string));
    
            var oldCodeParameter = oldCode != null ?
                new ObjectParameter("OldCode", oldCode) :
                new ObjectParameter("OldCode", typeof(string));
    
            var vehicleTitleParameter = vehicleTitle != null ?
                new ObjectParameter("VehicleTitle", vehicleTitle) :
                new ObjectParameter("VehicleTitle", typeof(string));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(long));
    
            var vehicleNatureIDParameter = vehicleNatureID.HasValue ?
                new ObjectParameter("VehicleNatureID", vehicleNatureID) :
                new ObjectParameter("VehicleNatureID", typeof(long));
    
            var vehicleTypeIDParameter = vehicleTypeID.HasValue ?
                new ObjectParameter("VehicleTypeID", vehicleTypeID) :
                new ObjectParameter("VehicleTypeID", typeof(long));
    
            var minimumWeightForPayableParameter = minimumWeightForPayable.HasValue ?
                new ObjectParameter("MinimumWeightForPayable", minimumWeightForPayable) :
                new ObjectParameter("MinimumWeightForPayable", typeof(double));
    
            var vehicleCategoryIDParameter = vehicleCategoryID.HasValue ?
                new ObjectParameter("VehicleCategoryID", vehicleCategoryID) :
                new ObjectParameter("VehicleCategoryID", typeof(long));
    
            var transporterIDParameter = transporterID.HasValue ?
                new ObjectParameter("TransporterID", transporterID) :
                new ObjectParameter("TransporterID", typeof(long));
    
            var lengthParameter = length.HasValue ?
                new ObjectParameter("Length", length) :
                new ObjectParameter("Length", typeof(double));
    
            var widthParameter = width.HasValue ?
                new ObjectParameter("Width", width) :
                new ObjectParameter("Width", typeof(double));
    
            var heightParameter = height.HasValue ?
                new ObjectParameter("Height", height) :
                new ObjectParameter("Height", typeof(double));
    
            var capacityParameter = capacity.HasValue ?
                new ObjectParameter("Capacity", capacity) :
                new ObjectParameter("Capacity", typeof(double));
    
            var wheelsParameter = wheels.HasValue ?
                new ObjectParameter("Wheels", wheels) :
                new ObjectParameter("Wheels", typeof(int));
    
            var axleParameter = axle.HasValue ?
                new ObjectParameter("Axle", axle) :
                new ObjectParameter("Axle", typeof(int));
    
            var mfgYearParameter = mfgYear.HasValue ?
                new ObjectParameter("MfgYear", mfgYear) :
                new ObjectParameter("MfgYear", typeof(int));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            var preferenceNoParameter = preferenceNo.HasValue ?
                new ObjectParameter("PreferenceNo", preferenceNo) :
                new ObjectParameter("PreferenceNo", typeof(int));
    
            var minumumLoadInTonParameter = minumumLoadInTon.HasValue ?
                new ObjectParameter("MinumumLoadInTon", minumumLoadInTon) :
                new ObjectParameter("MinumumLoadInTon", typeof(double));
    
            var maximumLoadInTonParameter = maximumLoadInTon.HasValue ?
                new ObjectParameter("MaximumLoadInTon", maximumLoadInTon) :
                new ObjectParameter("MaximumLoadInTon", typeof(double));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(long));
    
            var vehicleNoParameter = vehicleNo != null ?
                new ObjectParameter("VehicleNo", vehicleNo) :
                new ObjectParameter("VehicleNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_INSERT_New_Vehicles", vehicleIDParameter, vehicleRefNoParameter, oldCodeParameter, vehicleTitleParameter, branchIDParameter, vehicleNatureIDParameter, vehicleTypeIDParameter, minimumWeightForPayableParameter, vehicleCategoryIDParameter, transporterIDParameter, lengthParameter, widthParameter, heightParameter, capacityParameter, wheelsParameter, axleParameter, mfgYearParameter, priorityParameter, preferenceNoParameter, minumumLoadInTonParameter, maximumLoadInTonParameter, companyIDParameter, vehicleNoParameter);
        }
    
        public virtual ObjectResult<SP_SelectVehicles_Result> SP_SelectVehicles()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SelectVehicles_Result>("SP_SelectVehicles");
        }
    
        public virtual ObjectResult<Nullable<long>> Sp_VehichleInformation()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("Sp_VehichleInformation");
        }
    
        public virtual ObjectResult<Sp_VehichleDetail_Result> Sp_VehichleDetail()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_VehichleDetail_Result>("Sp_VehichleDetail");
        }
    
        public virtual int SP_InsertWeighmentEntries(string vehicleNo, string consecNo, Nullable<System.DateTime> date, Nullable<System.DateTime> time, string weighmentDetails)
        {
            var vehicleNoParameter = vehicleNo != null ?
                new ObjectParameter("VehicleNo", vehicleNo) :
                new ObjectParameter("VehicleNo", typeof(string));
    
            var consecNoParameter = consecNo != null ?
                new ObjectParameter("ConsecNo", consecNo) :
                new ObjectParameter("ConsecNo", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var timeParameter = time.HasValue ?
                new ObjectParameter("Time", time) :
                new ObjectParameter("Time", typeof(System.DateTime));
    
            var weighmentDetailsParameter = weighmentDetails != null ?
                new ObjectParameter("WeighmentDetails", weighmentDetails) :
                new ObjectParameter("WeighmentDetails", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertWeighmentEntries", vehicleNoParameter, consecNoParameter, dateParameter, timeParameter, weighmentDetailsParameter);
        }
    
        public virtual ObjectResult<SP_DeviceLocation_Result> SP_DeviceLocation(string userName, string processType)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var processTypeParameter = processType != null ?
                new ObjectParameter("ProcessType", processType) :
                new ObjectParameter("ProcessType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_DeviceLocation_Result>("SP_DeviceLocation", userNameParameter, processTypeParameter);
        }
    
        public virtual ObjectResult<string> SP_ShipmentDocNo()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_ShipmentDocNo");
        }
    
        public virtual ObjectResult<SP_InBoundDelivery_Result> SP_InBoundDelivery()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_InBoundDelivery_Result>("SP_InBoundDelivery");
        }
    
        public virtual ObjectResult<SP_OutBoundDelivery_Result> SP_OutBoundDelivery()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_OutBoundDelivery_Result>("SP_OutBoundDelivery");
        }
    
        public virtual ObjectResult<string> SP_InboundPartyDescription(string descp)
        {
            var descpParameter = descp != null ?
                new ObjectParameter("descp", descp) :
                new ObjectParameter("descp", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_InboundPartyDescription", descpParameter);
        }
    
        public virtual ObjectResult<string> SP_InBoundVehicleDelivery()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_InBoundVehicleDelivery");
        }
    
        public virtual ObjectResult<string> SP_OutboundPartyDescription(string descp)
        {
            var descpParameter = descp != null ?
                new ObjectParameter("descp", descp) :
                new ObjectParameter("descp", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_OutboundPartyDescription", descpParameter);
        }
    
        public virtual ObjectResult<string> SP_OutBoundVehicleDelivery()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_OutBoundVehicleDelivery");
        }
    
        public virtual ObjectResult<SP_InBoundVehicles_Result> SP_InBoundVehicles()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_InBoundVehicles_Result>("SP_InBoundVehicles");
        }
    
        public virtual ObjectResult<SP_OutBoundVehicles_Result> SP_OutBoundVehicles()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_OutBoundVehicles_Result>("SP_OutBoundVehicles");
        }
    
        public virtual ObjectResult<SP_In_OutBoundVehicles_Result> SP_In_OutBoundVehicles(string processType)
        {
            var processTypeParameter = processType != null ?
                new ObjectParameter("processType", processType) :
                new ObjectParameter("processType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_In_OutBoundVehicles_Result>("SP_In_OutBoundVehicles", processTypeParameter);
        }
    
        public virtual ObjectResult<SP_In_OutBoundVehicle_Result> SP_In_OutBoundVehicle(string processType)
        {
            var processTypeParameter = processType != null ?
                new ObjectParameter("processType", processType) :
                new ObjectParameter("processType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_In_OutBoundVehicle_Result>("SP_In_OutBoundVehicle", processTypeParameter);
        }
    
        public virtual ObjectResult<SP_InBound_OutBoundVehicle_Result> SP_InBound_OutBoundVehicle(string processType)
        {
            var processTypeParameter = processType != null ?
                new ObjectParameter("processType", processType) :
                new ObjectParameter("processType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_InBound_OutBoundVehicle_Result>("SP_InBound_OutBoundVehicle", processTypeParameter);
        }
    
        public virtual ObjectResult<SP_InBound_OutBoundDeliveries_Result> SP_InBound_OutBoundDeliveries(string processType)
        {
            var processTypeParameter = processType != null ?
                new ObjectParameter("processType", processType) :
                new ObjectParameter("processType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_InBound_OutBoundDeliveries_Result>("SP_InBound_OutBoundDeliveries", processTypeParameter);
        }
    
        public virtual ObjectResult<SP_InBound_OutBoundDelivery_Result> SP_InBound_OutBoundDelivery(string processType)
        {
            var processTypeParameter = processType != null ?
                new ObjectParameter("processType", processType) :
                new ObjectParameter("processType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_InBound_OutBoundDelivery_Result>("SP_InBound_OutBoundDelivery", processTypeParameter);
        }
    
        public virtual ObjectResult<SP_InBound_OutBound_Result> SP_InBound_OutBound(string processType)
        {
            var processTypeParameter = processType != null ?
                new ObjectParameter("processType", processType) :
                new ObjectParameter("processType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_InBound_OutBound_Result>("SP_InBound_OutBound", processTypeParameter);
        }
    
        public virtual ObjectResult<SP_InBound_Result> SP_InBound()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_InBound_Result>("SP_InBound");
        }
    
        public virtual ObjectResult<SP_OutBound_Result> SP_OutBound()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_OutBound_Result>("SP_OutBound");
        }
    }
}
